---
- name: add user
  user:
    name: cowrie
    state: present

- name: install packages
  yum:
    name: "{{ item }}"
  with_items:
    - git
    - gmp-devel
    - mpfr-devel
    - libmpc-devel

- name: install python {{ python_version }} via pyenv
  shell: /usr/local/bin/pyenv-switch.sh {{ python_version }}
  become: yes
  become_user: cowrie
  register: result
  changed_when: '"switched" in result.stdout'

- name: create log directories
  file:
    dest: "{{ item }}"
    owner: cowrie
    group: cowrie
    state: directory
  with_items:
    - /var/log/cowrie
    - /var/log/cowrie/tty
    - /var/log/cowrie/dl

- name: download source
  get_url:
    url: https://github.com/micheloosterhof/cowrie/archive/{{ cowrie_version }}.tar.gz
    dest: /usr/local/src/cowrie-{{ cowrie_version }}.tar.gz

- name: unarchive source
  unarchive:
    src: /usr/local/src/cowrie-{{ cowrie_version }}.tar.gz
    dest: /home/cowrie
    creates: /home/cowrie/cowrie-{{ cowrie_version }}/README.md
    remote_src: yes
    owner: cowrie
    group: users

- name: put cowrie.cfg
  template:
    src: home/cowrie/cowrie/cowrie.cfg.j2
    dest: /home/cowrie/cowrie-{{ cowrie_version }}/cowrie.cfg
    owner: cowrie
    group: users
  notify: restart cowrie

- name: put bin/cowrie
  copy:
    src: home/cowrie/cowrie/bin/cowrie
    dest: /home/cowrie/cowrie-{{ cowrie_version }}/bin/cowrie
    owner: cowrie
    group: users
    mode: 0755
  notify: restart cowrie

- name: put data/userdb.txt
  copy:
    src: home/cowrie/cowrie/data/userdb.txt
    dest: /home/cowrie/cowrie-{{ cowrie_version }}/data/userdb.txt
    owner: cowrie

- name: install pip modules
  shell: ~/.pyenv/shims/pip install --upgrade -r /home/cowrie/cowrie-{{ cowrie_version }}/requirements.txt
  become: yes
  become_user: cowrie
  register: result
  changed_when: '"up-to-date" not in result.stdout'

- name: put systemd config file
  template:
    src: etc/systemd/system/cowrie.service.j2
    dest: /etc/systemd/system/cowrie.service
  notify: restart cowrie

- name: start cowrie automatically
  systemd:
    name: cowrie.service
    state: started
    daemon_reload: yes
    enabled: yes

- name: open port for ssh
  firewalld:
    port: 22/tcp
    permanent: true
    immediate: true
    state: enabled
  when: ansible_port != 22 and cowrie_use_wellknown_port

- name: set port forwarding for ssh
  shell: firewall-cmd --permanent --zone=public --add-forward-port=port=22:proto=tcp:toport={{ cowrie_ssh_port }}
  register: result
  changed_when: '"ALREADY_ENABLED" not in result.stderr'
  failed_when: '"success" not in result.stdout'
  notify: reload firewalld
  when: ansible_port != 22 and cowrie_use_wellknown_port

- name: open port for telnet
  firewalld:
    port: 23/tcp
    permanent: true
    immediate: true
    state: enabled

- name: set port forwarding for telnet
  shell: firewall-cmd --permanent --zone=public --add-forward-port=port=23:proto=tcp:toport={{ cowrie_telnet_port }}
  register: result
  changed_when: '"ALREADY_ENABLED" not in result.stderr'
  failed_when: '"success" not in result.stdout'
  notify: reload firewalld

- name: put monit config
  template:
    src: etc/monit.d/cowrie.j2
    dest: /etc/monit.d/cowrie
  notify: reload monit
